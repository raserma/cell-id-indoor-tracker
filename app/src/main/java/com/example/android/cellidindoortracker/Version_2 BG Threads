package com.example.android.cellidindoortracker;

import android.app.Activity;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.graphics.Point;
import android.net.wifi.ScanResult;
import android.net.wifi.WifiManager;
import android.os.Bundle;
import android.os.Handler;
import android.os.HandlerThread;
import android.os.Looper;
import android.os.Message;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.widget.ImageView;

import com.qozix.tileview.TileView;

import java.util.List;
import java.util.Random;


public class MapViewActivity extends Activity {


    TileView tileView;
    ImageView markerB;

    private WifiManager mWifi;
    public BroadcastReceiver mReceiver;
    public long start, end;

    /** UI Handler */
    Handler mUIHandler = new Handler (){
        @Override
        public void handleMessage(Message msg) {
            switch(msg.what){
                case UPDATE_MAP:

                    Log.i("threads", "Log 11: thread: UI Thread, update map");

                    // Gets Point message from ProcessResults thread
                    Point point = (Point) msg.obj;

                    // Updates map with user position

                    tileView.removeMarker(markerB);
                    tileView.addMarker(markerB, point.x, point.y, -0.5f, -1.0f);
                    Log.i("threads", "Log 12: thread: UI Thread, map updated");


                    break;
                default:
                    break;
            }
        }
    };
    /** Scan Handler */
    private Handler mScanHandler;

    /** Process Results Handler */
    private Handler mProcessResultsHandler;

    public static final int SCAN_INTERVAL = 5000; // 3 seconds
    public static final int UPDATE_MAP = 1;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        mWifi = (WifiManager) getSystemService(Context.WIFI_SERVICE);
        Log.i("threads", "Log 1: oncreate");

        initiateMap();
        initiateThreads();

    }
    @Override
    protected void onDestroy(){
        /* Disconnect to prevent resource leaks */
        mScanHandler.sendEmptyMessage(ScanHandler.DISCONNECT);
        mProcessResultsHandler.sendEmptyMessage(ScanHandler.DISCONNECT);
    }




    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.menu_map_view, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        //noinspection SimplifiableIfStatement
        if (id == R.id.action_settings) {
            return true;
        }

        return super.onOptionsItemSelected(item);
    }



    private void initiateMap(){
        tileView = new TileView(this);

        tileView.setSize(2332,5796);
//        tileView.addDetailLevel(1f, "tilesfolder/1000_%col%_%row%.png",
//                "downsamplesfolder/map.png", 256, 256);
////        tileView.addDetailLevel(0.5f, "tilesfolder/500_%col%_%row%.png",
////                "downsamplesfolder/map500.png", 256, 256);
        tileView.addDetailLevel(0.25f, "tilesfolder/250_%col%_%row%.png",
                "map250.jpg", 256, 256);
        tileView.addDetailLevel(0.125f, "tilesfolder/125_%col%_%row%.png",
                "map125.jpg", 256, 256);
        tileView.setScale(0.25);
        setContentView(tileView);

        markerB = new ImageView(MapViewActivity.this);
        markerB.setImageResource(R.drawable.area_green);
        markerB.setAdjustViewBounds(true);

        // Define the bounds using the map size in pixel
        tileView.defineRelativeBounds(0, 150, 60, 0);
        Log.i("threads", "Log 2: Mapa iniciado");
    }

    /*
        There are two background threads (and their respective handlers) besides UI thread (and
        its UI handler):
            -Scan Thread: Scans available WiFis. It contains startScan() and Broadcast
             Wifi Receiver which is triggered once startScan() method is finished.
            -Processing Results Threads: Executes the determined indoor positioning
             algorithm using as parameter the list of WiFi APs collected from Scan Thread. Once
             algorithm is finished, this thread communicates with UI Handler which will update
             the indoor map interface.
    */
    private void initiateThreads(){
        Log.i("threads", "Log 3: iniciarThreads");
        /** Thread for Scanning WiFi */
        HandlerThread scanThread = new HandlerThread("ScanHandler");
        scanThread.start();
        mScanHandler = new ScanHandler(scanThread.getLooper()); // Binds handler to Scan Thread

        /** Thread for processing results */
        HandlerThread processResultsThread = new HandlerThread("ProcessResultsHandler");
        processResultsThread.start();
        mProcessResultsHandler = new ProcessResultsHandler(processResultsThread.getLooper()); // Binds
        // handler to ProcessResults Thread
        Log.i("threads", "Log 4: threads creados");

        // Starts scanning
        mScanHandler.sendEmptyMessage(ScanHandler.SCAN);
        Log.i("threads", "Log 5: start scanning");

    }

    class ScanHandler extends Handler {
        public static final int SCAN = 1;
        public static final int CONSULT_REPLY = 2;
        public static final int DISCONNECT = 3;
        private boolean isScanned = false;
        private List<ScanResult> wifiList;

        public ScanHandler(Looper looper){
            super(looper);
            /** Broadcast receiver necessary to handle WiFi Scanning. onReceive() method is
             * triggered  once that startScan() finishes, allowing to collect the AP wifi list */
            mReceiver = new BroadcastReceiver ()
            {
                @Override
                public void onReceive(Context c, Intent intent)
                {
                    if(!isScanned) {
                        Log.i("threads", "Log 7: onReceive");
                        isScanned = true;
                        wifiList = mWifi.getScanResults();

                        /* Calls the PROCESS_RESULTS case method of ProcessResults Thread with
                        list of available Wifis from startScan()  */
                        Message msg = mProcessResultsHandler.obtainMessage(ProcessResultsHandler
                                .PROCESS_RESULTS,  wifiList);
                        mProcessResultsHandler.sendMessage(msg);
                        Log.i("threads", "Log 7: wifilist sent to processresults; thread: scan");


                        /* Checks for ProcessResults Thread status after SCAN_INTERVAL seconds */

                        boolean isSend = mProcessResultsHandler.sendEmptyMessageDelayed
                                (ProcessResultsHandler
                                .STATUS, SCAN_INTERVAL);

                        Log.i("threads", "Log 8: sendemtpymessagedelayed: "+isSend);

                    }
                }
            };
            registerReceiver(mReceiver, new IntentFilter(WifiManager.SCAN_RESULTS_AVAILABLE_ACTION));
        }

        @Override
        public void handleMessage(Message msg) {
            switch(msg.what){
                /* Called by Activity in onCreate or by itself after checking that ProcessResults
                *  thread is not running.
                *  It triggers onReceive() method on Broadcast receiver when scanning is finished.
                * */
                case SCAN:
                    isScanned = false;
                    mWifi.startScan();
                    start = System.currentTimeMillis();
                    Log.i("threads", "Log 6: startScan");
                    break;
                /* Called by Process Results thread
                 * It contains the STATUS sent by ProcessResults Thread: finished or not  */
                case CONSULT_REPLY:
                    if((Boolean) msg.obj) // ProcessResults thread is finished
                        sendEmptyMessage(SCAN);
                    else // ProcessResults thread is not finished
                        Log.i("thread", "processs results not FINISHED");
                        mProcessResultsHandler.sendEmptyMessageDelayed(ProcessResultsHandler
                                .STATUS, SCAN_INTERVAL);
                    break;
                /* Called when Activity is destroyed */
                case DISCONNECT:
                    getLooper().quit();
                    break;

                default: break;
            }
        }
    }


    class ProcessResultsHandler extends Handler{
        public static final int PROCESS_RESULTS = 1;
        public static final int STATUS = 2;
        public static final int DISCONNECT = 3;

        private boolean isFinish = false;
        private List<ScanResult> wifiList;
        private Point userPosition;

        public ProcessResultsHandler(Looper looper){
            super(looper);
        }
        @Override
        public void handleMessage(Message msg) {
            switch(msg.what){
                /* Called by Scan Thread after onReceive() is triggered.
                 * It contains Scan WiFi results list
                 * */
                case PROCESS_RESULTS:

                    isFinish = false;
                    wifiList = (List<ScanResult>)msg.obj;
                    // Positioning algorithms

                    isFinish = true;

                    // Testing code
                    Random r = new Random();
                    int Low = 0;
                    int High = 150;
                    int R = r.nextInt(High-Low) + Low;
                    userPosition = new Point(30, R);
                    /* Call the UPDATE_MAP case method of UI Handler with user position on it */
                    msg = mUIHandler.obtainMessage(UPDATE_MAP, userPosition);
                    mUIHandler.sendMessage(msg);
                    Log.i("threads", "Log 10: thread: process results, update map");
                    break;

                /* Called by Scan Thread when needs to check STATUS of ProcessResults thread
                 * It sends back to Scan thread if it's finished or not.
                 * */
                case STATUS:
                    Log.i("threads", "Log 9: thread: process results");
                    /* Call the CONSULT_REPLY case method with boolean "finish" on it*/
                    end = System.currentTimeMillis();
                    Log.i("threads", "time " + (end - start));
                    msg = mScanHandler.obtainMessage(ScanHandler.CONSULT_REPLY, isFinish);
                    Log.i("threads", "isfinish?"+ isFinish);
                    mScanHandler.sendMessage(msg);

                    break;

                case DISCONNECT:
                    getLooper().quit();
                    break;

                default: break;
            }
        }
    }

}
